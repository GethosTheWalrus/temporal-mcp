services:
  # Temporal server (using the official docker-compose setup)
  temporal:
    container_name: temporal
    depends_on:
      - postgresql
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
    image: temporalio/auto-setup:latest
    networks:
      - temporal-network
    ports:
      - "7233:7233"

  # PostgreSQL database for Temporal
  postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:13
    networks:
      - temporal-network
    ports:
      - "5432:5432"
    volumes:
      - temporal-postgres-data:/var/lib/postgresql/data

  # Temporal Web UI
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:latest
    networks:
      - temporal-network
    ports:
      - "8080:8080"

  # Temporal Worker
  temporal-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: temporal-worker
    depends_on:
      - temporal
    environment:
      - TEMPORAL_HOST=temporal:7233
      - TASK_QUEUE=temporal-mcp-task-queue
    networks:
      - temporal-network
    restart: unless-stopped
    command: ["python", "-m", "temporal_mcp.worker", "temporal:7233", "temporal-mcp-task-queue"]

  # MCP Server (optional - can be run locally or in container)
  # Uncomment if you want to run the MCP server in Docker
  # mcp-server:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: temporal-mcp-server
  #   depends_on:
  #     - temporal
  #   environment:
  #     - TEMPORAL_HOST=temporal:7233
  #   networks:
  #     - temporal-network
  #   restart: unless-stopped
  #   stdin_open: true
  #   tty: true

networks:
  temporal-network:
    driver: bridge

volumes:
  temporal-postgres-data:
